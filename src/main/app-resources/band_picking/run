#!/opt/anaconda/envs/env_ewf_wfp_03_03_01/bin/python
#######
#This first node is responsible for picking up correct inputs -smoothed and gap-filled S2 tiles
# dispatching refrences + Index + date in json format to next aggregating nodes
# Hint: input datapipeline does not generate start-stop date for its products therefore 
# an exclusing condition applied on results of open-search


import os
import sys
import string
import atexit
sys.path.append('/'.join([os.environ['_CIOP_APPLICATION_PATH'], 'util']))
sys.path.append('../util')
import pandas as pd

from util import *

import cioppy 
ciop = cioppy.Cioppy()

import json

    
# define the exit codes
SUCCESS = 0
ERR_RESOLUTION = 10
ERR_STAGEIN = 20
ERR_NO_OUTPUT = 30

# add a trap to exit gracefully
def clean_exit(exit_code):
    log_level = 'INFO'
    if exit_code != SUCCESS:
        log_level = 'ERROR'  
   
    msg = {SUCCESS: 'Processing successfully concluded',
           ERR_RESOLUTION: 'Could not resolve Sentinel-1 product enclosure',
           ERR_STAGEIN: 'Could not stage-in Sentinel-1 product', 
           ERR_NO_OUTPUT: "Missing output"
    }
 
    ciop.log(log_level, msg[exit_code])  

def main():
        

    os.chdir(ciop.tmp_dir)
    
    data_pipeline_parameters = dict()    
    
    data_pipeline_parameters['username'] = ciop.getparam('_T2Username')
    data_pipeline_parameters['api_key'] = ciop.getparam('_T2ApiKey')
    data_pipeline_parameters['end_point'] = ciop.getparam('input_end_point')
    
    #### Search Params

    search_params = dict()
    
    search_params['start'] = ciop.getparam('start_date')
    search_params['stop'] = ciop.getparam('end_date')
    
    search_params['q'] = ciop.getparam('tile_id')
    
    search_params['cat'] =  '!dataitem'
    search_params['count'] = 1000
    

    
    
    creds = '{}:{}'.format(data_pipeline_parameters['username'],
                           data_pipeline_parameters['api_key'])

    
    search_input = pd.DataFrame(ciop.search(end_point=data_pipeline_parameters['end_point'],
                                      params=search_params,
                                      output_fields='self,enclosure,title',
                                      timeout='1200000',
                                      model='GeoTime',
                                      creds=creds))
    search_input.columns=['self','enclosure','title']
    
    inputs = search_input[(search_input['title'].str.contains("synthetic") | search_input['title'].str.contains("native"))]
    inputs = inputs.reset_index(drop=True)
    
    
    inputs = inputs.merge(inputs.apply(lambda row: name_date_from_enclosure(row), axis=1),
                                                        left_index=True,
                                                        right_index=True)
    
    
    
    ### Extract required time interval 
    start_date_julian = tojulian(search_params['start'][:10])
    end_date_julian = tojulian(search_params['stop'][:10])
    
    inputs_time_filtered = inputs.drop(inputs[(inputs['jday'] > end_date_julian) | (inputs['jday'] < start_date_julian)].index).reset_index(drop=True)
    
    search_input = None
    inputs = None
    
    ### 
    indices=['NDVI','NDWI','MNDWI','NDBI']
    bands=dict()
    bands['NDVI']=["B08","B04"]
    bands['NDWI']=["B03","B08"]
    bands['MNDWI']=["B03","B11"]
    bands['NDBI']=["B11","B08"]
    ###
    
    for index in indices:
        
        
        band = inputs_time_filtered[inputs_time_filtered['name'].str.contains(bands[index][0])]
        b1_sorted = band.sort_values(by=['jday'],inplace=False, ignore_index=True)
    
        band = inputs_time_filtered[inputs_time_filtered['name'].str.contains(bands[index][1])]
        b2_sorted = band.sort_values(by=['jday'],inplace=False, ignore_index=True)
    
        date_list = b1_sorted['day'].unique().tolist()
        for date in date_list:
            series = dict()
            series[bands[index][0]] = b1_sorted[b1_sorted['day'] == date].enclosure.tolist()[0]
            series[bands[index][1]] = b2_sorted[b2_sorted['day'] == date].enclosure.tolist()[0]
            series['date'] = date
            series['index'] = index
            if series[bands[index][1]] !='':
                ciop.publish((json.dumps(series) + '\n'), mode="silent")

    


try:
    main()
except SystemExit as e:
    if e.args[0]:
        clean_exit(e.args[0])
    raise
else:
    atexit.register(clean_exit, 0)
