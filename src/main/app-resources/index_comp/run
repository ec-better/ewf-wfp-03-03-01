#!/opt/anaconda/envs/env_ewf_wfp_03_03_01/bin/python
#######
# This node recieves a json file and computes the required index
# Publishes the index as a COG GeoTiff 

import os
import sys
import string
import atexit
import json 
import gdal
import numpy as np

sys.path.append('/'.join([os.environ['_CIOP_APPLICATION_PATH'], 'util']))
sys.path.append('../util')

from util import *

import cioppy 
ciop = cioppy.Cioppy()
    
# define the exit codes
SUCCESS = 0
ERR_RESOLUTION = 10
ERR_STAGEIN = 20
ERR_NO_OUTPUT = 30

# add a trap to exit gracefully
def clean_exit(exit_code):
    log_level = 'INFO'
    if exit_code != SUCCESS:
        log_level = 'ERROR'  
   
    msg = {SUCCESS: 'Processing successfully concluded',
           ERR_RESOLUTION: 'Could not resolve Sentinel-1 product enclosure',
           ERR_STAGEIN: 'Could not stage-in Sentinel-1 product', 
           ERR_NO_OUTPUT: "Missing output"
    }
 
    ciop.log(log_level, msg[exit_code])

def main():
        
    ciop = cioppy.Cioppy()
    
    os.chdir(ciop.tmp_dir)
    
    data_pipeline_parameters = dict()    
    
    data_pipeline_parameters['username'] = ciop.getparam('_T2Username')
    data_pipeline_parameters['api_key'] = ciop.getparam('_T2ApiKey')

   
    for input in sys.stdin:
        
        #Read dict 
        input_series_dict = json.loads(input.rstrip())
        ciop.log('DEBUG', 'Got the input JSON file.')
        ciop.log('DEBUG', 'Converted input JSON file into dict: {}'.format(input_series_dict))
        keys=list(input_series_dict.keys())
        series = dict()
        
        ciop.log('INFO', 'Loading {}'.format(input_series_dict[keys[0]]))
        
        ds1=gdal.Open(get_vsi_url(input_series_dict[keys[0]], 
                                  data_pipeline_parameters['username'], 
                                  data_pipeline_parameters['api_key']))
        
        series[keys[0]]=ds1.GetRasterBand(1).ReadAsArray()
        geo_transform = ds1.GetGeoTransform()
        projection = ds1.GetProjection()
        
        ciop.log('INFO', 'Loading {}'.format(input_series_dict[keys[1]]))
        
        ds2=gdal.Open(get_vsi_url(input_series_dict[keys[1]], 
                                              data_pipeline_parameters['username'], 
                                              data_pipeline_parameters['api_key']))
                                              
        series[keys[1]]=ds2.GetRasterBand(1).ReadAsArray()
        
        ciop.log('INFO', 'Computing {} on {}'.format(input_series_dict['index'],input_series_dict['date']))
        
        index_expression = lambda x,y: -10000 if(x+y)==0 else (x-y)/float(x+y)
        vfunc = np.vectorize(index_expression, otypes=[np.float])

        result = vfunc(series[keys[0]],series[keys[1]])
        
        ciop.log('INFO', 'Scaling {} on {}'.format(input_series_dict['index'],input_series_dict['date']))
        
        scale10k = lambda x: -10000 if x==-10000 or x<-1 or x>1 else x*10000
        vfunc_scale = np.vectorize(scale10k,otypes=[np.int16])
        result_scaled = vfunc_scale(result)
        result = None   
        
        cols = result_scaled.shape[0]
        rows = result_scaled.shape[1]
        
        
        base_name = (os.path.basename(input_series_dict[keys[0]])).split('.')[0]
        output_name = 'S2_{}_{}_{}_{}'.format(base_name[7:17],
                                              input_series_dict['index'], 
                                              input_series_dict['date'],
                                              input_series_dict['series_time_span'])

        drv = gdal.GetDriverByName('GTiff')

        ds = drv.Create('temp.tif', 
                        cols, rows, 
                        1, 
                        gdal.GDT_Int16)
        
        
        ds.SetGeoTransform(geo_transform)
        ds.SetProjection(projection)
        ds.GetRasterBand(1).WriteArray(result_scaled, 0, 0)
        ds.GetRasterBand(1).SetDescription(output_name)
        
        ###Added Metadata 
        metadata = dict()
        
        metadata['date'] = input_series_dict['date']
        metadata['index'] = input_series_dict['index']
        metadata['series_time_span'] = input_series_dict['series_time_span'] 
        metadata[keys[0]] = input_series_dict[keys[0]]
        metadata[keys[1]] = input_series_dict[keys[1]]
        
        metadata['identifier'] = output_name
        metadata['startdate'] = '{}-{}-{}T00:00:00Z'.format(input_series_dict['date'][:4],input_series_dict['date'][4:6],input_series_dict['date'][6:])
        metadata['enddate'] = '{}-{}-{}T23:59:59Z'.format(input_series_dict['date'][:4],input_series_dict['date'][4:6],input_series_dict['date'][6:])
        metadata['wkt'] = input_series_dict['wkt']
        metadata['no_data'] = '-10000'
        
        
        
        ds.GetRasterBand(1).SetMetadata(metadata)
        ###Convert to COG
        
        translate_options = gdal.TranslateOptions(gdal.ParseCommandLine('-co TILED=YES ' \
                                                                        '-co COPY_SRC_OVERVIEWS=YES ' \
                                                                        '-co COMPRESS=LZW '\
                                                                        '-a_nodata -10000'))
        gdal.SetConfigOption('COMPRESS_OVERVIEW', 'DEFLATE')
        ds.BuildOverviews('NEAREST', [2,4,8,16,32])
        
        
        translated_tif = '{}.tif'.format(output_name)
        ciop.log('INFO', 'Creating COG {}'.format(translated_tif))
        
        gdal.Translate(translated_tif,
                       ds,
                       options=translate_options)
        
        ds.FlushCache()
        ciop.log('INFO', 'COG created')
        
        #metadata['wkt'] = get_raster_wkt(translated_tif)
        
        title = 'Sentinel-2 {} {} {} , full period {}'.format(base_name[7:17],
                                                              input_series_dict['index'], 
                                                              input_series_dict['date'],
                                                              '-'.join(input_series_dict['series_time_span'].split('_')))

        
        
        with open('{}.properties'.format(output_name), 'wb') as file:
            
            file.write(bytes('title={}\n'.format(title),encoding = 'utf-8'))
            file.write(bytes('date={}/{}\n'.format(metadata['startdate'],metadata['enddate']),encoding = 'utf-8'))
            file.write(bytes('geometry={}\n'.format(metadata['wkt']),encoding = 'utf-8'))

        
        ciop.log('INFO', 'Publishing {}'.format(output_name))
        ciop.publish(os.path.join(ciop.tmp_dir,translated_tif), metalink=True)
        ciop.publish(os.path.join(ciop.tmp_dir,'{}.properties'.format(output_name)), metalink=True)

try:
    main()
except SystemExit as e:
    if e.args[0]:
        clean_exit(e.args[0])
    raise
else:
    atexit.register(clean_exit, 0)
